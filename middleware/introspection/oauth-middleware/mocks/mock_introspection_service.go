// Code generated by MockGen. DO NOT EDIT.
// Source: introspection_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIntrospectionService is a mock of IntrospectionService interface
type MockIntrospectionService struct {
	ctrl     *gomock.Controller
	recorder *MockIntrospectionServiceMockRecorder
}

// MockIntrospectionServiceMockRecorder is the mock recorder for MockIntrospectionService
type MockIntrospectionServiceMockRecorder struct {
	mock *MockIntrospectionService
}

// NewMockIntrospectionService creates a new mock instance
func NewMockIntrospectionService(ctrl *gomock.Controller) *MockIntrospectionService {
	mock := &MockIntrospectionService{ctrl: ctrl}
	mock.recorder = &MockIntrospectionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIntrospectionService) EXPECT() *MockIntrospectionServiceMockRecorder {
	return m.recorder
}

// Introspect mocks base method
func (m *MockIntrospectionService) Introspect(context *gin.Context, accessToken string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Introspect", context, accessToken)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Introspect indicates an expected call of Introspect
func (mr *MockIntrospectionServiceMockRecorder) Introspect(context, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Introspect", reflect.TypeOf((*MockIntrospectionService)(nil).Introspect), context, accessToken)
}
