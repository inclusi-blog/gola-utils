// Code generated by MockGen. DO NOT EDIT.
// Source: trace.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	trace "go.opencensus.io/trace"
	http "net/http"
	reflect "reflect"
)

// MockTrace is a mock of Trace interface
type MockTrace struct {
	ctrl     *gomock.Controller
	recorder *MockTraceMockRecorder
}

// MockTraceMockRecorder is the mock recorder for MockTrace
type MockTraceMockRecorder struct {
	mock *MockTrace
}

// NewMockTrace creates a new mock instance
func NewMockTrace(ctrl *gomock.Controller) *MockTrace {
	mock := &MockTrace{ctrl: ctrl}
	mock.recorder = &MockTraceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTrace) EXPECT() *MockTraceMockRecorder {
	return m.recorder
}

// Continue mocks base method
func (m *MockTrace) Continue(ctx context.Context, httpRequest *http.Request) (*trace.Span, *http.Request) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Continue", ctx, httpRequest)
	ret0, _ := ret[0].(*trace.Span)
	ret1, _ := ret[1].(*http.Request)
	return ret0, ret1
}

// Continue indicates an expected call of Continue
func (mr *MockTraceMockRecorder) Continue(ctx, httpRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Continue", reflect.TypeOf((*MockTrace)(nil).Continue), ctx, httpRequest)
}

// DeriveTracingFromRemoteParent mocks base method
func (m *MockTrace) DeriveTracingFromRemoteParent(spanName string, traceID trace.TraceID, spanID trace.SpanID) (context.Context, *trace.Span) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveTracingFromRemoteParent", spanName, traceID, spanID)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(*trace.Span)
	return ret0, ret1
}

// DeriveTracingFromRemoteParent indicates an expected call of DeriveTracingFromRemoteParent
func (mr *MockTraceMockRecorder) DeriveTracingFromRemoteParent(spanName, traceID, spanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveTracingFromRemoteParent", reflect.TypeOf((*MockTrace)(nil).DeriveTracingFromRemoteParent), spanName, traceID, spanID)
}

// StartTracing mocks base method
func (m *MockTrace) StartTracing(ctx context.Context, cmdName string) (context.Context, *trace.Span) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTracing", ctx, cmdName)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(*trace.Span)
	return ret0, ret1
}

// StartTracing indicates an expected call of StartTracing
func (mr *MockTraceMockRecorder) StartTracing(ctx, cmdName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTracing", reflect.TypeOf((*MockTrace)(nil).StartTracing), ctx, cmdName)
}

// CreateNewSpan mocks base method
func (m *MockTrace) CreateNewSpan(ctx context.Context, spanName string) (*trace.Span, context.Context) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewSpan", ctx, spanName)
	ret0, _ := ret[0].(*trace.Span)
	ret1, _ := ret[1].(context.Context)
	return ret0, ret1
}

// CreateNewSpan indicates an expected call of CreateNewSpan
func (mr *MockTraceMockRecorder) CreateNewSpan(ctx, spanName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewSpan", reflect.TypeOf((*MockTrace)(nil).CreateNewSpan), ctx, spanName)
}
