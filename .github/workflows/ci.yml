name: gola-utils
on: [push]
permissions:
  contents: write
  actions: write
jobs:
  golang-ci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '1.18'
      - name: Granting private modules access
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          CI_SERVER_HOST: github.com
          GONOPROXY: github.com/inclusi-blog
          GOPRIVATE: github.com/inclusi-blog
        run: git config --global url."https://root:${GITHUB_ACCESS_TOKEN}@github.com/".insteadOf "https://github.com"
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
  semgrep:
    name: semgrep
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    steps:
      - uses: actions/checkout@v3
      - run: semgrep --config=auto .
  unit-test:
    name: unit-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '1.18'
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      - name: Granting private modules access
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          CI_SERVER_HOST: github.com
          GONOPROXY: github.com/inclusi-blog
          GOPRIVATE: github.com/inclusi-blog
        run: git config --global url."https://root:${GITHUB_ACCESS_TOKEN}@github.com/".insteadOf "https://github.com"
      - name: Run test
        env:
          TEST_COVERAGE: ${{ vars.TEST_COVERAGE }}
        run: |
          sudo apt update && sudo apt-get install bc
          go test -cover  ./... -coverprofile=/tmp/coverage.out -v
          test_coverage=$(go tool cover -func=/tmp/coverage.out | tail -1 |awk '{print $3}'| tr -d '%') # gives pure coverage value
          echo "Code coverage is ${test_coverage}"
          if [[ 1 -eq $(echo ${TEST_COVERAGE}'<'$test_coverage  | bc -l) ]];
          then echo "Pass tests and coverage is over ${TEST_COVERAGE}%";
          else echo "Pass tests but coverage is under ${TEST_COVERAGE}%"; exit 1;
          fi
          echo "Download coverage.out and execute `go tool cover -html=coverage.out`"
  create-tag:
    runs-on: ubuntu-latest
    needs: unit-test
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Set up Git
        run: |
          git config --global user.name "technicaluser"
          git config --global user.email "golagolampmp@gmail.com"

      - name: Create new tag
        if: github.ref == 'refs/heads/master'
        run: |
          git fetch --all --tags -f
          latest_tag=$(git tag | awk '/^v[0-9]+\.[0-9]+\.[0-9]+-dev-release$/ {print $0}' | sort -rV | head -n 1)

          if [[ $latest_tag == v* ]]; then
            version=$(echo "$latest_tag" | sed -e 's/^v//')
            version=$(echo "$version" | sed -e 's/-dev-release$//')
            major=$(echo "$version" | cut -d. -f1)
            minor=$(echo "$version" | cut -d. -f2)
            patch=$(echo "$version" | cut -d. -f3)
            if [[ $minor -eq 50 || $patch -eq 100 ]]; then
              major=$((major+1))
              minor=0
              patch=0
            elif [[ $patch -eq 50 ]]; then
              minor=$((minor+1))
              patch=0
            else
              patch=$((patch+1))
            fi
            new_tag="v$major.$minor.$patch-dev-release"
          else
            new_tag="v0.0.1-dev-release"
          fi
          echo "New tag: $new_tag"
          echo "VERSION=$new_tag" >> $GITHUB_ENV
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          commitish: dev
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: Automated release generated by GitHub Actions
          draft: false
          prerelease: true