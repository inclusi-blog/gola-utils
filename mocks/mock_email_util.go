// Code generated by MockGen. DO NOT EDIT.
// Source: alert/email/email_util.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github.com/inclusi-blog/gola-utils/alert/email/models"
	golaerror "github.com/inclusi-blog/gola-utils/golaerror"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUtil is a mock of Util interface
type MockUtil struct {
	ctrl     *gomock.Controller
	recorder *MockUtilMockRecorder
}

// MockUtilMockRecorder is the mock recorder for MockUtil
type MockUtilMockRecorder struct {
	mock *MockUtil
}

// NewMockUtil creates a new mock instance
func NewMockUtil(ctrl *gomock.Controller) *MockUtil {
	mock := &MockUtil{ctrl: ctrl}
	mock.recorder = &MockUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUtil) EXPECT() *MockUtilMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockUtil) Send(emailDetails models.EmailDetails, includeBaseTemplate bool) *golaerror.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", emailDetails, includeBaseTemplate)
	ret0, _ := ret[0].(*golaerror.Error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockUtilMockRecorder) Send(emailDetails, includeBaseTemplate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockUtil)(nil).Send), emailDetails, includeBaseTemplate)
}

// SendWithContext mocks base method
func (m *MockUtil) SendWithContext(context context.Context, emailDetails models.EmailDetails, includeBaseTemplate bool) *golaerror.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWithContext", context, emailDetails, includeBaseTemplate)
	ret0, _ := ret[0].(*golaerror.Error)
	return ret0
}

// SendWithContext indicates an expected call of SendWithContext
func (mr *MockUtilMockRecorder) SendWithContext(context, emailDetails, includeBaseTemplate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWithContext", reflect.TypeOf((*MockUtil)(nil).SendWithContext), context, emailDetails, includeBaseTemplate)
}
