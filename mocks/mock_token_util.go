// Code generated by MockGen. DO NOT EDIT.
// Source: oauth/token_util.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	model "github.com/gola-glitch/gola-utils/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUtils is a mock of Utils interface
type MockUtils struct {
	ctrl     *gomock.Controller
	recorder *MockUtilsMockRecorder
}

// MockUtilsMockRecorder is the mock recorder for MockUtils
type MockUtilsMockRecorder struct {
	mock *MockUtils
}

// NewMockUtils creates a new mock instance
func NewMockUtils(ctrl *gomock.Controller) *MockUtils {
	mock := &MockUtils{ctrl: ctrl}
	mock.recorder = &MockUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUtils) EXPECT() *MockUtilsMockRecorder {
	return m.recorder
}

// DecodeEncryptedIdToken mocks base method
func (m *MockUtils) DecodeEncryptedIdToken(ctx context.Context) (model.IdToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeEncryptedIdToken", ctx)
	ret0, _ := ret[0].(model.IdToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeEncryptedIdToken indicates an expected call of DecodeEncryptedIdToken
func (mr *MockUtilsMockRecorder) DecodeEncryptedIdToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeEncryptedIdToken", reflect.TypeOf((*MockUtils)(nil).DecodeEncryptedIdToken), ctx)
}

// EncryptIdToken mocks base method
func (m *MockUtils) EncryptIdToken(ctx *gin.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptIdToken", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptIdToken indicates an expected call of EncryptIdToken
func (mr *MockUtilsMockRecorder) EncryptIdToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptIdToken", reflect.TypeOf((*MockUtils)(nil).EncryptIdToken), ctx, token)
}

// DecodeIdTokenFromJWT mocks base method
func (m *MockUtils) DecodeIdTokenFromJWT(idToken string) (model.IdToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeIdTokenFromJWT", idToken)
	ret0, _ := ret[0].(model.IdToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeIdTokenFromJWT indicates an expected call of DecodeIdTokenFromJWT
func (mr *MockUtilsMockRecorder) DecodeIdTokenFromJWT(idToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeIdTokenFromJWT", reflect.TypeOf((*MockUtils)(nil).DecodeIdTokenFromJWT), idToken)
}
